#!/usr/bin/env groovy

// Configure the build properties
properties([
    buildDiscarder(logRotator(numToKeepStr: '20', daysToKeepStr: '4')),
    disableConcurrentBuilds(),
])

def deployed = false

pipeline {

    parameters {
        // Note: We need to define this variable manually in our Jenkins configuration (to select the version we want to test)
        // string(defaultValue: 'Manager-4.0', name: 'testsuite_branch')
        string(defaultValue: 'galaxy-ci@suse.de', description: 'Email address to be used as recipient for the report', name: 'mailto')
        text(name: 'mu_repositories', defaultValue: '{"sle-client" : { "salt" : "repo_url" , "traditional" : "repo_url" }}', description: 'Salt & Traditional MU Repositories for each client, in json format')
    }

    environment {
      repository = 'SUSE/spacewalk'
      deployed = false
    }

    agent { label 'sumaform-cucumber' }

    triggers {
        cron('H(0-30) 0-23/14 * * *')

    }

    stages {
        stage('Deploy') {
            steps {
                checkout scm
                git branch: 'master', url: 'https://gitlab.suse.de/galaxy/sumaform-test-runner.git'
                script { 
                    echo '# Inject MU repositoies as environment variable'
                    export_command = "APPEND_BASHRC=\"\$APPEND_BASHRC;export mu_repositories='${params.mu_repositories}'\""
                    sh "echo ${export_command} >> ${params.sumaform_env}"
                    echo 'Deploy QAM environment'
                    sh "bash jenkins-deploy.sh ${params.sumaform_env} ${params.mailto} ${params.testsuite_branch}"
                }
            }
        }

        stage('SUSE Manager Setup') {
            steps {
                script { 
                    deployed = true
                    sh "TESTSUITE_SET=qam_core bash jenkins-test-runner.sh ${params.sumaform_env}"
                }
            }
        }

        stage('Initialize clients') {
            steps {
                sh "TESTSUITE_SET=qam_init_clients RAKE_TASK=parallel bash jenkins-test-runner.sh ${params.sumaform_env}"
            }
        }

        stage('Smoke tests') {
            steps {
                sh "TESTSUITE_SET=generate_features RAKE_TASK=utils bash jenkins-test-runner.sh ${params.sumaform_env}"
                sh "TESTSUITE_SET=qam_smoke_tests RAKE_TASK=parallel bash jenkins-test-runner.sh ${params.sumaform_env}"
            }
        }
    }

    post {
        always{
            script {
                if (deployed == true){
                    sh "TESTSUITE_SET=finishing bash jenkins-test-runner.sh ${params.sumaform_env} ||:"
                    publishHTML( target: [
                                allowMissing: true,
                                alwaysLinkToLastBuild: false,
                                keepAll: true,
                                reportDir: "results/build-${env.BUILD_NUMBER}/cucumber_report/",
                                reportFiles: 'cucumber_report.html',
                                reportName: "TestSuite Report"]
                    )
                    junit allowEmptyResults: true, testResults: "results/build-${env.BUILD_NUMBER}/results_junit/*.xml"
                }
            }
        }
        success{
            script {
                if (params.cleanWorkspace == true) {
                    echo 'Clean up current workspace, when job success.'
                    cleanWs()
                }
            }
        }
    }
}
