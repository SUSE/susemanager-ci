#!/usr/bin/env groovy

// Configure the build properties
properties([
    buildDiscarder(logRotator(numToKeepStr: '20', daysToKeepStr: '4')),
    disableConcurrentBuilds(),
])

def deployed = false

pipeline {

    //parameters {
        // Note: We need to define these variables manually in our Jenkins configuration (to select the version we want to test)
        // string(defaultValue: 'Manager-4.0', description: 'Testsuite GitHub branch', name: 'testsuite_branch')
        // string(defaultValue: '40/VARS-full-PRV.sh', description: 'Sumaform environment', name: 'sumaform_env')
        // string(defaultValue: 'testsuite-stable-with-new-fake-repos', description: 'Sumaform branch or commit', name: 'sumaform_branch')
    //}

    environment {
      repository = 'SUSE/spacewalk'
      deployed = false
      stage_counter_setup = 0
      stage_counter_init_clients = 0
      stage_counter_secondary = 0

    }

    options { timestamps () }

    agent { label 'sumaform-cucumber' }

    triggers {
        cron('H(0-30) 0-23/4 * * *')
    }

    stages {
        stage('Deploy') {
            steps {
                checkout scm
//                git branch: 'master', url: 'https://gitlab.suse.de/galaxy/sumaform-test-runner.git'
                git branch: 'snapshots', url: 'https://gitlab.suse.de/ktsamis/sumaform-test-runner.git'
                script {
                    if (params.sumaform_branch != null) {
                      sh "SUMAFORM_BRANCH=${params.sumaform_branch} bash jenkins-deploy.sh ${params.sumaform_env} ${params.testsuite_branch}"
                    } else {
                      sh "bash jenkins-deploy.sh ${params.sumaform_env} ${params.testsuite_branch}"
                    }
                    sh "bash snapshots-tool.sh create_snapshots deploy"
                    deployed = true
                }
            }
        }

        stage('Core - Setup') {
            steps {
                script {
                    env.deployed = true
                    if (${env.stage_counter_setup} > 0) {
                        sh "bash snapshots-tool.sh revert_snapshots deploy"
                    } else {
                        env.stage_counter_setup++
                        sh "RAKE_NAMESPACE=cucumber RAKE_TASK=core bash jenkins-test-runner.sh ${params.sumaform_env}"
                        sh "bash snapshots-tool.sh create_snapshots core_setup"
                    }
                }
            }
        }

        stage('Core - Initialize clients') {
            steps {
                script {
                    if (${env.stage_counter_init_clients} > 0) {
                        sh "bash snapshots-tool.sh revert_snapshots core_setup"
                    } else {
                        env.stage_counter_init_clients++
                        sh "RAKE_NAMESPACE=parallel RAKE_TASK=init_clients bash jenkins-test-runner.sh ${params.sumaform_env}"
                        sh "bash snapshots-tool.sh create_snapshots init_clients"
                    }
                }
            }
        }

        stage('Secondary features') {
            steps {
                script {
                    if (${env.stage_counter_secondary} > 0) {
                        sh "bash snapshots-tool.sh revert_snapshots init_clients"
                    } else {
                        env.stage_counter_secondary++
                        sh "RAKE_NAMESPACE=cucumber RAKE_TASK=secondary bash jenkins-test-runner.sh ${params.sumaform_env} ||:"
                        sh "RAKE_NAMESPACE=parallel RAKE_TASK=secondary_parallelizable bash jenkins-test-runner.sh ${params.sumaform_env}"
                    }
                }
            }
        }
        stage('Clean up snapshots') {
            script {
                if (${env.stage_counter_init_clients} >= 0) {
                    sh "bash snapshots-tool.sh delete_snapshots init_clients"
                }
                if (${env.stage_counter_core_setup} >= 0) {
                    sh "bash snapshots-tool.sh delete_snapshots core_setup"
                }
                if ( env.deployed == true ) {
                    sh "bash snapshots-tool.sh delete_snapshots deploy"
                }
                }
        }
    post {
        always {
            script {
                if (deployed == true) {
                    sh "RAKE_NAMESPACE=cucumber RAKE_TASK=finishing bash jenkins-test-runner.sh ${params.sumaform_env} ||:"
                    publishHTML( target: [
                                allowMissing: true,
                                alwaysLinkToLastBuild: false,
                                keepAll: true,
                                reportDir: "results/build-${env.BUILD_NUMBER}/cucumber_report/",
                                reportFiles: 'cucumber_report.html',
                                reportName: "TestSuite Report"]
                    )
                    junit allowEmptyResults: true, testResults: "results/build-${env.BUILD_NUMBER}/results_junit/*.xml"
                    sh "ERROR_SETUP=0 . ${env.WORKSPACE}/jenkins-utils.sh && . ${params.sumaform_env} && send_mail"
                } else {
                    sh "ERROR_SETUP=1 . ${env.WORKSPACE}/jenkins-utils.sh && . ${params.sumaform_env} && send_mail"
                }
        }
        success{
                if (params.cleanWorkspace == true) {
                    echo 'Clean up current workspace, when job success.'
                    cleanWs()
                }
                }
            }
        }
    }
}
