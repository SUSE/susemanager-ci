#!/usr/bin/env groovy

// Configure the build properties
properties([
        buildDiscarder(logRotator(numToKeepStr: '500', daysToKeepStr: '4')),
        disableConcurrentBuilds(),
])

pipeline {

    options {
        timeout(time: 30, unit: 'MINUTES') 
    }

    parameters {
        string(defaultValue: '', description: 'Gitarro PR', name: 'GITARRO_PR_NUMBER')
        string(defaultValue: '', description: 'SUSE Manager PR', name: 'PR_NUMBER')
        booleanParam(defaultValue: true, description: 'Clean up workspace after a successful execution.', name: 'cleanWorkspace')
    }

    environment {
        repository = "SUSE/spacewalk"
        gitarro_cmd = 'gitarro.ruby2.5'
        gitarro_local = 'ruby gitarro.rb'
        gitarro_changelog_test = "-r ${repository}" +
                " -c changelog_test -d \"test if changelog was updated\" " +
                " -t /home/jenkins/bin/changelog.rb " +
                " -u ${env.BUILD_URL}" +
                " -g \"${env.WORKSPACE}\" "

        gitarro_enable_merging = "-r ${repository}" +
                " --force_test -c merge_enabled -d \"Merging enabled (requires changelog_test passing)\" " +
                " -u ${env.BUILD_URL}" +
                " -g \"${env.WORKSPACE}\" "
    }
    // run only on specific hosts
    agent { label 'suse-manager-unit-tests' }

    stages {
        stage('Clean Up Workspace') {
            steps {
                echo 'Clean up previous workspace'
                cleanWs()
                echo 'Check out SCM'
                checkout scm
                script {
                    if (params.GITARRO_PR_NUMBER != '') {
                        echo 'Check out Gitarro PR'
                        checkout([$class           : 'GitSCM', branches: [[name: "FETCH_HEAD"]],
                                  extensions       : [[$class: 'LocalBranch']],
                                  userRemoteConfigs: [[refspec: "+refs/pull/${params.GITARRO_PR_NUMBER}/head:refs/remotes/origin/PR-${params.GITARRO_PR_NUMBER}", url: "https://git@github.com/openSUSE/gitarro"]]])
                    }
                }
            }
        }

        stage('Run changelog test') {
            steps {
                echo 'Run changelog tests'
                script {
                    gitarro_changelog_test_cmd = "${gitarro_cmd} ${gitarro_changelog_test}"
                    gitarro_enable_merging_cmd = "${gitarro_cmd} ${gitarro_enable_merging}"
                    if (params.GITARRO_PR_NUMBER != '') {
                            gitarro_changelog_test_cmd = "${gitarro_local} ${gitarro_changelog_test}"
                            gitarro_enable_merging_cmd = "${gitarro_local} ${gitarro_enable_merging}"
                    }                    
                    if (params.PR_NUMBER != '') {
                        gitarro_changelog_test_cmd = "${gitarro_changelog_test_cmd} -P ${params.PR_NUMBER}"
                        gitarro_enable_merging_cmd = "${gitarro_enable_merging_cmd} -P ${params.PR_NUMBER}"
                        currentBuild.displayName = "PR: ${params.PR_NUMBER}"
                    }
                }
                sh "set +e; ${gitarro_changelog_test_cmd}; CLRET=\${?}; " +
                   "if [ \$CLRET -eq 0 ]; then " +
                   "${gitarro_enable_merging_cmd} -t /usr/bin/true; " +
                   "else ${gitarro_enable_merging_cmd} -t /usr/bin/false; " +
                   "fi; exit \$CLRET"
            }
        }
    }
    // postactions
    post {
        success {
            script {
                if (params.cleanWorkspace == true) {
                    echo 'Clean up current workspace, when job success.'
                    cleanWs()
                }
            }
        }
    }
}
