#!/usr/bin/env groovy

// WARNING: This pipeline is working progress, the test is not finished. So please, don't add to the list of PR Checks

properties([
        buildDiscarder(logRotator(numToKeepStr: '500', daysToKeepStr: '4')),
        disableConcurrentBuilds(),
])

pipeline {

    options {
        timeout(time: 30, unit: 'MINUTES') 
    }
    
    parameters {
        string(defaultValue: '', description: 'Gitarro PR', name: 'GITARRO_PR_NUMBER')
        string(defaultValue: '', description: 'SUSE Manager PR', name: 'PR_NUMBER')
        booleanParam(defaultValue: true, description: 'Clean up workspace after a successful execution.', name: 'cleanWorkspace')
    }
    
    environment {
        repository = "SUSE/spacewalk"
        context = "schema_sql_standard_name"
        description = "comply sql filename standards"
        filter = "schema/spacewalk"
        git_fs = "${env.WORKSPACE}"
        test = "${env.WORKSPACE}/jenkins_pipelines/manager_prs/tests_files/sql_schema_filename.py"
        gitarro_cmd = 'gitarro.ruby2.1'
        gitarro_local = 'ruby gitarro.rb'
        runtest = "-r ${repository}" +
                " -c ${context} -d \"${description}\" " +
                " -f ${filter} " +
                " -g ${git_fs} " +
                " -u ${env.BUILD_URL}" +
                " -t ${test} "

    }
    agent { label 'suse-manager-unit-tests' }

    stages {
        stage('Clean Up Workspace') {
            steps {
                echo 'Clean up previous workspace'
                cleanWs()
                echo 'Check out SCM'
                checkout scm
                script {
                    if (params.GITARRO_PR_NUMBER != '') {
                        echo 'Check out Gitarro PR'
                        checkout([$class           : 'GitSCM', branches: [[name: "FETCH_HEAD"]],
                                  extensions       : [[$class: 'LocalBranch']],
                                  userRemoteConfigs: [[refspec: "+refs/pull/${params.GITARRO_PR_NUMBER}/head:refs/remotes/origin/PR-${params.GITARRO_PR_NUMBER}", url: "https://git@github.com/openSUSE/gitarro"]]])
                    }
                }
            }
        }
        stage('Run sql schem filename tests') {
            steps {
                script {
                    commands = "${gitarro_cmd} ${runtest}"
                    if (params.GITARRO_PR_NUMBER != '') {
                        commands = "${gitarro_local} ${runtest}"
                    }
                    if (params.PR_NUMBER != '') {
                        commands = "${commands} -P ${params.PR_NUMBER}"
                        currentBuild.displayName = "PR: ${params.PR_NUMBER}"
                    }    
                }
                sh "${commands}"
            }
        }
    }
    post {
        success {
            script {
                if (params.cleanWorkspace == true) {
                    echo 'Clean up current workspace, when job success.'
                    cleanWs()
                }
            }
        }
    }
}
