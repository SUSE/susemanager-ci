#!/usr/bin/env groovy

// Configure the build properties
properties([
    buildDiscarder(logRotator(numToKeepStr: '500', daysToKeepStr: '4')),
    disableConcurrentBuilds(),
])

pipeline {

  // env variables
  environment { 

    // CONF To edit  
     repository = "SUSE/spacewalk"
     context = "backend_unittests_pgsql" 
     description = "python backend pgsql unit test"
     git_fs = "${env.WORKSPACE}"      
     filter = 'backend/'
     // the actual test is the git repo (inside spacewalk)
     test = "susemanager-utils/testing/automation/backend-unittest-pgsql.sh" 
     gitarro_common_params = "-r ${repository} -c ${context} -d ${description} -f ${filter} -t ${test} -g ${git_fs}"
      
     // this are execution jobs
     check = "gitarro.ruby2.1 ${gitarro_common_params} --check --changed_since 3600" 
     runtest = "gitarro.ruby2.1 ${gitarro_common_params} -u ${env.BUILD_URL}"

   }
   // run only on specific hosts
    agent { label 'suse-manager-unit-tests' }
    
    parameters {
        booleanParam(defaultValue: true, description: 'Clean up workspace after a successful execution.', name: 'cleanWorkspace')
    }
    
    triggers {
        cron('H/5 * * * *')
    }
    
    stages {
        stage('Clean Up Workspace') {
            steps {
                echo 'Clean up previous workspace'
                cleanWs()
                echo 'Check out SCM'
                checkout scm
            }
        }
        stage('Check Pull Request') {
            steps {
                 echo 'Check if a PR need a test'
                 sh "${check} 2>&1 | tee gitarro_check.log"
               }
         }
        // THIS JOB RUN ONLY IF THE 1ST IS SUCCESSEFULL. ( so it is triggered by 1st)
        stage('Run tests against PR') {
            when {
                expression { return readFile('gitarro_check.log').contains('TESTREQUIRED=true') }
            }
            steps {
                  echo 'Run tests!'
                  sh "${runtest}"
                  junit "**/backend/reports/pgsql_tests.xml" 
            }
        }
    }
  post { 
        script {
            if (params.cleanWorkspace == true) {
                echo 'Clean up current workspace, when job success.'
                cleanWs()
            }
        }
  }
}
