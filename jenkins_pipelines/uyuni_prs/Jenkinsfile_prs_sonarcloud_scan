#!/usr/bin/env groovy

// Configure the build properties
properties([
        buildDiscarder(logRotator(numToKeepStr: '500', daysToKeepStr: '4'))
])

pipeline {

    options {
        timeout(time: 60, unit: 'MINUTES')
    }
    
    parameters {
        string(defaultValue: '', description: 'Uyuni PR', name: 'PR_NUMBER')
        booleanParam(defaultValue: true, description: 'Clean up workspace after a successful execution.', name: 'cleanWorkspace')
    }

    environment {
        repository = "uyuni-project/uyuni"
        context = "sonarcloud_scanner"
        description = "Sonarcloud scanner"
        git_fs = "${env.WORKSPACE}"
    }
    // run only on specific hosts
    agent { label 'uyuni-uyunidocker' }

    stages {
        stage('Clean Up Workspace') {
            steps {
                echo 'Clean up previous workspace'
                cleanWs()
                echo 'Check out SCM'
                checkout scm
            }
        }
        stage('Compile Java code') {
            steps {
                echo 'Getting Java build dependencies'
                sh "UYUNI_CLONE=`ls -d uyuni*`; " +
                    "cd \$UYUNI_CLONE; " +
                    "docker run --rm -v \$PWD:/usr/src -w /usr/src " +
                        "registry.opensuse.org/systemsmanagement/uyuni/master/docker/containers/uyuni-master-pgsql:latest " +
                        "ant -f java/manager-build.xml ivy"

                echo 'Building Java code'
                sh "UYUNI_CLONE=`ls -d uyuni*`; " +
                    "cd \$UYUNI_CLONE; " +
                    "docker run --rm -v \$PWD:/usr/src -w /usr/src " +
                        "registry.opensuse.org/systemsmanagement/uyuni/master/docker/containers/uyuni-master-pgsql:latest " +
                        "ant -f java/manager-build.xml compile"
            }
        }
        stage('Scan code and tests results for sonarcloud') {
            steps {
                echo 'Run sonarcloud scanner'
                sh "UYUNI_CLONE=`ls -d uyuni*`; " +
                    "PR_BASE=`curl -n https://api.github.com/repos/uyuni-project/uyuni/pulls/${params.PR_NUMBER} | grep -A3 '\"base\"' | grep '\"ref\"' | sed 's/^ *\"ref\": \"\\([^\"]*\\)\",/\\1/'`; " +
                    "PR_BRANCH=`curl -n https://api.github.com/repos/uyuni-project/uyuni/pulls/${params.PR_NUMBER} | grep -A3 '\"head\"' | grep '\"ref\"' | sed 's/^ *\"ref\": \"\\([^\"]*\\)\",/\\1/'`; " +
                    "cd \$UYUNI_CLONE; " +
                    "mkdir -p .sonar; " +
                    "source /var/lib/jenkins/.sonar-credentials; " +
                    "docker run --rm -v \$PWD:/usr/src " +
                        "-v \$PWD/../.sonar:/opt/sonar-scanner/.sonar " +
                        "-e SONAR_TOKEN " +
                        "sonarsource/sonar-scanner-cli " +
                        "-Dsonar.junit.reportPaths=\"\" "
                        "-Dsonar.coverage.jacoco.xmlReportPaths=\"\" "
                        "-Dsonar.pullrequest.key=${params.PR_NUMBER} " +
                        "-Dsonar.pullrequest.branch=\$PR_BRANCH " +
                        "-Dsonar.pullrequest.base=\$PR_BASE"
            }
        }
    }

    post {
        success {
            cleanWs()
        }
    }
}
