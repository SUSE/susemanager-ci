#!/usr/bin/env groovy

// Configure the build properties
properties([
    buildDiscarder(logRotator(numToKeepStr: '500', daysToKeepStr: '4')),
    disableConcurrentBuilds(),
])

pipeline {

  // env variables
  environment { 
    // specific psql conf
    repository = "uyuni-project/uyuni"
    context = "schema_migration_test_oracle" 
    description = "schema migration test oracle" 
    filter = "schema/spacewalk"
    git_fs = "${env.WORKSPACE}"      
    test = "susemanager-utils/testing/automation/schema-migration-test-oracle.sh"
    // trigger tests
    check = "gitarro.ruby2.1  -r ${repository}" + 
            " -c ${context} -d ${description} " +
            " -f ${filter} " +
            " -t ${test} " +
            " -g ${git_fs} " +
            "--check --changed_since 3600" 
    // oracle test
    runtest_oracle = "gitarro.ruby2.1  -r ${repository}" + 
                 " -c ${context} -d ${description} " +
                 " -f ${filter} " +
                 " -g ${git_fs} " +
                 " -u \"${env.BUILD_URL}\"" +
                 " -t ${test} " 
  }

  // run only on specific hosts
  agent { label 'suse-manager-unit-tests' }
  // trigger
  triggers { cron('H/5 * * * *') }
  stages {
    stage('Clean Up Workspace') {
        steps {
            echo 'Clean up previous workspace'
            cleanWs()
            echo 'Check out SCM'
            checkout scm
        }
    }
    stage('Check Pull Request') {
      steps {
        echo 'Check if a PR need a test'
        sh "${check} 2>&1 | tee gitarro_check.log"
        }
      }
    stage('Run tests oracle') {
      when {
        expression { return readFile('gitarro_check.log').contains('TESTREQUIRED=true') }
      }
      steps {
        echo 'Run schema tests oracle '
        sh "$runtest_oracle"
      }
    }
  }
  post { 
        success{
            script {
                if (params.cleanWorkspace == true) {
                    echo 'Clean up current workspace, when job success.'
                    cleanWs()
                }
            }
        }
    }
}
