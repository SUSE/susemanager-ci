#!/usr/bin/env groovy

// Configure the build properties
properties([
    buildDiscarder(logRotator(numToKeepStr: '500', daysToKeepStr: '4'))
])

pipeline {

    options {
        timeout(time: 30, unit: 'MINUTES') 
    }

    parameters {
        string(defaultValue: '', description: 'Gitarro PR', name: 'GITARRO_PR_NUMBER')
    }

    environment {
      repository = "uyuni-project/uyuni"
      gitarro_cmd = 'gitarro.ruby2.5'
      gitarro_local = 'ruby gitarro.rb'
      check = " -r ${repository} -t placeholder --check --changed_since 172800"
    }

    agent { label 'suse-manager-unit-tests' }

    triggers {
        cron('H/10 * * * *')
    }

    stages {
        stage('Clean Up Workspace') {
            steps {
                echo 'Clean up previous workspace'
                cleanWs()
                echo 'Check out SCM'
                checkout scm
                script {
                    if (params.GITARRO_PR_NUMBER != '') {
                        echo 'Check out Gitarro PR'
                        checkout([$class           : 'GitSCM', branches: [[name: "FETCH_HEAD"]],
                                  extensions       : [[$class: 'LocalBranch']],
                                  userRemoteConfigs: [[refspec: "+refs/pull/${params.GITARRO_PR_NUMBER}/head:refs/remotes/origin/PR-${params.GITARRO_PR_NUMBER}", url: "https://git@github.com/openSUSE/gitarro"]]])
                    }
                }
            }
        }
        stage('Trigger pending tests') {
            steps {
                script {
                    contexts = [
                            'java_pgsql_tests' : 'java/',
                            'spacecmd_unittests': 'spacecmd/',
                            'backend_unittests_pgsql' : 'python/',
                            'schema_migration_test_pgsql' : 'schema/spacewalk',
                            'susemanager_unittests' : 'susemanager/'
                    ]
                    contexts.each { context, filter ->
                        commands = "${gitarro_cmd} ${check} -c ${context} -f ${filter}"
                        if (params.GITARRO_PR_NUMBER != '') {
                            commands = "${gitarro_local} ${check} -c ${context} -f ${filter}"
                        }
                        PENDING = sh(
                            script: "${commands}",
                            returnStdout: true
                            ).trim()
                        echo PENDING
                        if (PENDING.contains('TESTREQUIRED=true')) {
                            PR_NUMBER = sh(script: "grep 'PR_NUMBER:' ${env.WORKSPACE}/.gitarro_vars | cut -d ':' -f2", returnStdout: true).trim()
                            build(
                                job: "uyuni-prs-${context}-pipeline",
                                parameters: [
                                             [$class: 'StringParameterValue', name: 'GITARRO_PR_NUMBER', value: params.GITARRO_PR_NUMBER], 
                                             [$class: 'StringParameterValue', name: 'PR_NUMBER', value: PR_NUMBER]
                                            ],
                                wait: false
                            )                        }
                    }
                }
            }
        }
    }

    post {
        success{
            script {
                if (params.cleanWorkspace == true) {
                    echo 'Clean up current workspace, when job success.'
                    cleanWs()
                }
            }
        }
    }
}
