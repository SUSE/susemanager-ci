#!/usr/bin/env groovy

// Configure the build properties
properties([
        buildDiscarder(logRotator(numToKeepStr: '500', daysToKeepStr: '4'))
])

pipeline {

    options {
        timeout(time: 60, unit: 'MINUTES')
    }
    
    parameters {
        string(defaultValue: '', description: 'Gitarro PR', name: 'GITARRO_PR_NUMBER')
        string(defaultValue: '', description: 'Uyuni PR', name: 'PR_NUMBER')
        booleanParam(defaultValue: true, description: 'Clean up workspace after a successful execution.', name: 'cleanWorkspace')
    }

    environment {

        // specific psql conf
        repository = "uyuni-project/uyuni"
        context = "java_pgsql_tests"
        description = "java pgsql unit test"
        filter = "java/"
        git_fs = "${env.WORKSPACE}"
        // the actual test is the git repo
        test = "susemanager-utils/testing/automation/java-unittests-pgsql.sh"
        gitarro_common_params = "-r ${repository} -c ${context} -d ${description} -f ${filter} -t ${test} -g ${git_fs}"
        gitarro_cmd = 'gitarro.ruby2.5'
        gitarro_local = 'ruby gitarro.rb'
        runtest = "${gitarro_common_params} -u ${env.BUILD_URL}"

    }
    // run only on specific hosts
    agent { label 'sumadocker-nue' }

    stages {
        stage('Clean Up Workspace') {
            steps {
                echo 'Clean up previous workspace'
                cleanWs()
                echo 'Check out SCM'
                checkout scm
                script {
                    if (params.GITARRO_PR_NUMBER != '') {
                        echo 'Check out Gitarro PR'
                        checkout([$class           : 'GitSCM', branches: [[name: "FETCH_HEAD"]],
                                  extensions       : [[$class: 'LocalBranch']],
                                  userRemoteConfigs: [[refspec: "+refs/pull/${params.GITARRO_PR_NUMBER}/head:refs/remotes/origin/PR-${params.GITARRO_PR_NUMBER}", url: "https://git@github.com/openSUSE/gitarro"]]])
                    }
                }
            }
        }
        stage('Run Java psql unit test') {
            steps {
                echo 'Run psql unit tests'
                script {
                    commands = "${gitarro_cmd} ${runtest}"
                    if (params.GITARRO_PR_NUMBER != '') {
                            commands = "${gitarro_local} ${runtest}"
                    }
                    if (params.PR_NUMBER != '') {
                        commands = "${commands} -P ${params.PR_NUMBER}"
                        currentBuild.displayName = "PR: ${params.PR_NUMBER}"
                    }
                }
                sh "set +e; ${commands}; TESTS_RESULT=\$?; set -e;"
                echo 'Collecting JUnit Test reports'
                junit allowEmptyResults: true, testResults: "**/java/test-results/*.xml"
                sh "exit \$TESTS_RESULT"
            }
        }
        stage('Scan code and tests results for sonarcloud') {
            steps {
                echo 'Run sonarcloud scanner'
                sh "UYUNI_CLONE=`ls -d uyuni*`; " +
                    "PR_BASE=`curl -n https://api.github.com/repos/uyuni-project/uyuni/pulls/${params.PR_NUMBER} | grep -A3 '\"base\"' | grep '\"ref\"' | sed 's/^ *\"ref\": \"\\([^\"]*\\)\",/\\1/'`; " +
                    "PR_BRANCH=`curl -n https://api.github.com/repos/uyuni-project/uyuni/pulls/${params.PR_NUMBER} | grep -A3 '\"head\"' | grep '\"ref\"' | sed 's/^ *\"ref\": \"\\([^\"]*\\)\",/\\1/'`; " +
                    "cd \$UYUNI_CLONE; " +
                    "mkdir -p .sonar; " +
                    "source /var/lib/jenkins/.sonar-credentials; " +
                    "docker run --rm -v \$PWD:/usr/src " +
                        "-v \$PWD/../.sonar:/opt/sonar-scanner/.sonar " +
                        "-e SONAR_TOKEN " +
                        "sonarsource/sonar-scanner-cli " +
                        "-Dsonar.pullrequest.key=${params.PR_NUMBER} " +
                        "-Dsonar.pullrequest.branch=\$PR_BRANCH " +
                        "-Dsonar.pullrequest.base=\$PR_BASE"
            }
        }
    }

    post {
        success {
            cleanWs()
        }
    }
}
